## things v5 needs...
TestInit - ...
Terms - ...

## pragmas
#~ attributes - get/set subroutine or variable attributes
#~ autodie - Replace functions with ones that succeed or die with lexical scope
#~ autouse - postpone load of modules until a function is used
#~ base - Establish an ISA relationship with base classes at compile time
#~ bigint - Transparent BigInteger support for Perl
#~ bignum - Transparent BigNumber support for Perl
#~ bigrat - Transparent BigNumber/BigRational support for Perl
#~ blib - Use MakeMaker's uninstalled version of a package
#~ bytes - Perl pragma to force byte semantics rather than character semantics
#~ charnames - access to Unicode character names and named character sequences; also define character names
#~ constant - Perl pragma to declare constants
#~ diagnostics - produce verbose warning diagnostics
#~ encoding - allows you to write your script in non-ascii or non-utf8
#~ feature - Perl pragma to enable new features
#~ fields - compile-time class fields
#~ filetest - Perl pragma to control the filetest permission operators
if - use a Perl module if a condition holds [Terms]
#~ integer - Perl pragma to use integer arithmetic instead of floating point
#~ less - perl pragma to request less of something
#~ lib - manipulate @INC at compile time
#~ locale - Perl pragma to use or avoid POSIX locales for built-in operations
#~ mro - Method Resolution Order
#~ open - perl pragma to set default PerlIO layers for input and output
#~ ops - Perl pragma to restrict unsafe operations when compiling
overload - Package for overloading Perl operations
#~ overloading - perl pragma to lexically control overloading
#~ parent - Establish an ISA relationship with base classes at compile time
#~ re - Perl pragma to alter regular expression behaviour
#~ sigtrap - Perl pragma to enable simple signal handling
#~ sort - perl pragma to control sort() behaviour
#~ # strict - Perl pragma to restrict unsafe constructs
#~ subs - Perl pragma to predeclare sub names
#~ threads - Perl interpreter-based threads
#~ threads::shared - Perl extension for sharing data structures between threads
#~ utf8 - Perl pragma to enable/disable UTF-8 (or UTF-EBCDIC) in source code
#~ # vars - Perl pragma to predeclare global variable names
#~ vmsish - Perl pragma to control VMS-specific language features
warnings - Perl pragma to control optional warnings [Terms]
warnings::register - warnings import function 

#~ ## A
#~ AnyDBM_File - provide framework for multiple DBMs
#~ App::Prove - Implements the prove command.
#~ App::Prove::State - State storage for the prove command.
#~ App::Prove::State::Result - Individual test suite results.
#~ App::Prove::State::Result::Test - Individual test results.
#~ Archive::Extract - A generic archive extracting mechanism
#~ Archive::Tar - module for manipulations of tar archives
#~ Archive::Tar::File - a subclass for in-memory extracted file from Archive::Tar
#~ Attribute::Handlers - Simpler definition of attribute handlers
#~ AutoLoader - load subroutines only on demand
#~ AutoSplit - split a package for autoloading

#~ ## B
#~ B - The Perl Compiler Backend
#~ B::Concise - Walk Perl syntax tree, printing concise info about ops
#~ B::Debug - Walk Perl syntax tree, printing debug info about ops
#~ B::Deparse - Perl compiler backend to produce perl code
#~ B::Lint - Perl lint
#~ B::Lint::Debug - Adds debugging stringification to B::
#~ B::Showlex - Show lexical variables used in functions or files
#~ B::Terse - Walk Perl syntax tree, printing terse info about ops
#~ B::Xref - Generates cross reference reports for Perl programs
#~ Benchmark - benchmark running times of Perl code

#~ ## C
#~ Carp - alternative warn and die for modules
#~ CGI - Handle Common Gateway Interface requests and responses
#~ CGI::Apache - Backward compatibility module for CGI.pm
#~ CGI::Carp - CGI routines for writing to the HTTPD (or other) error log
#~ CGI::Cookie - Interface to HTTP Cookies
#~ CGI::Fast - CGI Interface for Fast CGI
#~ CGI::Pretty - module to produce nicely formatted HTML code
#~ CGI::Push - Simple Interface to Server Push
#~ CGI::Switch - Backward compatibility module for defunct CGI::Switch
#~ CGI::Util - Internal utilities used by CGI module
#~ Class::Struct - declare struct-like datatypes as Perl classes
#~ Compress::Raw::Bzip2 - Low-Level Interface to bzip2 compression library
#~ Compress::Raw::Zlib - Low-Level Interface to zlib compression library
#~ Compress::Zlib - Interface to zlib compression library
Config - access Perl configuration information [Terms]
#~ Config::Extensions - hash lookup of which core extensions were built.
#~ CPAN - query, download and build perl modules from CPAN sites
#~ CPAN::Debug - internal debugging for CPAN.pm
#~ CPAN::Distroprefs - read and match distroprefs
#~ CPAN::FirstTime - Utility for CPAN::Config file Initialization
#~ CPAN::HandleConfig - internal configuration handling for CPAN.pm
#~ CPAN::Kwalify - Interface between CPAN.pm and Kwalify.pm
#~ CPAN::Nox - Wrapper around CPAN.pm without using any XS module
#~ CPAN::Queue - internal queue support for CPAN.pm
#~ CPAN::Tarzip - internal handling of tar archives for CPAN.pm
#~ CPAN::Version - utility functions to compare CPAN versions
#~ CPANPLUS - API & CLI access to the CPAN mirrors
#~ CPANPLUS::Backend - programmer's interface to CPANPLUS
#~ CPANPLUS::Backend::RV - return value objects
#~ CPANPLUS::Config - configuration defaults and heuristics for CPANPLUS
#~ CPANPLUS::Configure - configuration for CPANPLUS
#~ CPANPLUS::Dist - base class for plugins
#~ CPANPLUS::Dist::Autobundle - distribution class for installation snapshots
#~ CPANPLUS::Dist::Base - Base class for custom distribution classes
#~ CPANPLUS::Dist::Build - CPANPLUS plugin to install packages that use Build.PL
#~ CPANPLUS::Dist::Build::Constants - Constants for CPANPLUS::Dist::Build
#~ CPANPLUS::Dist::MM - distribution class for MakeMaker related modules
#~ CPANPLUS::Dist::Sample - Sample code to create your own Dist::* plugin
#~ CPANPLUS::Error - error handling for CPANPLUS
#~ CPANPLUS::Internals - CPANPLUS internals
#~ CPANPLUS::Internals::Extract - internals for archive extraction
#~ CPANPLUS::Internals::Fetch - internals for fetching files
#~ CPANPLUS::Internals::Report - internals for sending test reports
#~ CPANPLUS::Internals::Search - internals for searching for modules
#~ CPANPLUS::Internals::Source - internals for updating source files
#~ CPANPLUS::Internals::Source::Memory - In memory implementation
#~ CPANPLUS::Internals::Source::SQLite - SQLite implementation
#~ CPANPLUS::Internals::Utils - convenience functions for CPANPLUS
#~ CPANPLUS::Module - CPAN module objects for CPANPLUS
#~ CPANPLUS::Module::Author - CPAN author object for CPANPLUS
#~ CPANPLUS::Module::Author::Fake - dummy author object for CPANPLUS
#~ CPANPLUS::Module::Checksums - checking the checksum of a distribution
#~ CPANPLUS::Module::Fake - fake module object for internal use
#~ CPANPLUS::Selfupdate - self-updating for CPANPLUS
#~ CPANPLUS::Shell - base class for CPANPLUS shells
#~ CPANPLUS::Shell::Classic - CPAN.pm emulation for CPANPLUS
#~ CPANPLUS::Shell::Default - the default CPANPLUS shell
#~ CPANPLUS::Shell::Default::Plugins::CustomSource - add custom sources to CPANPLUS
#~ CPANPLUS::Shell::Default::Plugins::Remote - connect to a remote CPANPLUS
#~ CPANPLUS::Shell::Default::Plugins::Source - read in CPANPLUS commands
Cwd - get pathname of current working directory

#~ ## D
#~ Data::Dumper - stringified perl data structures, suitable for both printing and eval
#~ DB - programmatic interface to the Perl debugging API
#~ DBM_Filter - Filter DBM keys/values
#~ DBM_Filter::compress - filter for DBM_Filter
#~ DBM_Filter::encode - filter for DBM_Filter
#~ DBM_Filter::int32 - filter for DBM_Filter
#~ DBM_Filter::null - filter for DBM_Filter
#~ DBM_Filter::utf8 - filter for DBM_Filter
#~ DB_File - Perl5 access to Berkeley DB version 1.x
#~ Devel::InnerPackage - find all the inner packages of a package
#~ Devel::Peek - A data debugging tool for the XS programmer
#~ Devel::PPPort - Perl/Pollution/Portability
#~ Devel::SelfStubber - generate stubs for a SelfLoading module
#~ Digest - Modules that calculate message digests
#~ Digest::base - Digest base class
#~ Digest::file - Calculate digests of files
#~ Digest::MD5 - Perl interface to the MD5 Algorithm
#~ Digest::SHA - Perl extension for SHA-1/224/256/384/512
#~ DirHandle - supply object methods for directory handles
#~ Dumpvalue - provides screen dump of Perl data.
#~ DynaLoader - Dynamically load C libraries into Perl code

#~ ## E
#~ Encode - character encodings in Perl
#~ Encode::Alias - alias definitions to encodings
#~ Encode::Byte - Single Byte Encodings
#~ Encode::CJKConstants - Internally used by Encode::??::ISO_2022_*
#~ Encode::CN - China-based Chinese Encodings
#~ Encode::CN::HZ - internally used by Encode::CN
#~ Encode::Config - internally used by Encode
#~ Encode::EBCDIC - EBCDIC Encodings
#~ Encode::Encoder - Object Oriented Encoder
#~ Encode::Encoding - Encode Implementation Base Class
#~ Encode::GSM0338 - ESTI GSM 03.38 Encoding
#~ Encode::Guess - Guesses encoding from data
#~ Encode::JP - Japanese Encodings
#~ Encode::JP::H2Z - internally used by Encode::JP::2022_JP*
#~ Encode::JP::JIS7 - internally used by Encode::JP
#~ Encode::KR - Korean Encodings
#~ #Encode::KR::2022_KR - internally used by Encode::KR
#~ Encode::MIME::Header - MIME 'B' and 'Q' header encoding
#~ Encode::MIME::Name - internally used by Encode
#~ Encode::Symbol - Symbol Encodings
#~ Encode::TW - Taiwan-based Chinese Encodings
#~ Encode::Unicode - Various Unicode Transformation Formats
#~ Encode::Unicode::UTF7 - UTF-7 encoding
English - use nice English (or awk) names for ugly punctuation variables [Terms]
#~ Env - perl module that imports environment variables as scalars or arrays
#~ Errno - System errno constants
#~ Exporter - Implements default import method for modules
#~ Exporter::Heavy - Exporter guts
#~ ExtUtils::CBuilder - Compile and link C code for Perl modules
#~ ExtUtils::CBuilder::Platform::Windows - Builder class for Windows platforms
#~ ExtUtils::Command - utilities to replace common UNIX commands in Makefiles etc.
#~ ExtUtils::Command::MM - Commands for the MM's to use in Makefiles
#~ ExtUtils::Constant - generate XS code to import C header constants
#~ ExtUtils::Constant::Base - base class for ExtUtils::Constant objects
#~ ExtUtils::Constant::Utils - helper functions for ExtUtils::Constant
#~ ExtUtils::Constant::XS - generate C code for XS modules' constants.
#~ ExtUtils::Embed - Utilities for embedding Perl in C/C++ applications
#~ ExtUtils::Install - install files from here to there
#~ ExtUtils::Installed - Inventory management of installed modules
#~ ExtUtils::Liblist - determine libraries to use and how to use them
#~ ExtUtils::MakeMaker - Create a module Makefile
#~ ExtUtils::MakeMaker::Config - Wrapper around Config.pm
#~ ExtUtils::MakeMaker::FAQ - Frequently Asked Questions About MakeMaker
#~ ExtUtils::MakeMaker::Tutorial - Writing a module with MakeMaker
#~ ExtUtils::Manifest - utilities to write and check a MANIFEST file
#~ ExtUtils::Miniperl - write the C code for perlmain.c
#~ ExtUtils::Mkbootstrap - make a bootstrap file for use by DynaLoader
#~ ExtUtils::Mksymlists - write linker options files for dynamic extension
#~ ExtUtils::MM - OS adjusted ExtUtils::MakeMaker subclass
#~ ExtUtils::MM_AIX - AIX specific subclass of ExtUtils::MM_Unix
#~ ExtUtils::MM_Any - Platform-agnostic MM methods
#~ ExtUtils::MM_BeOS - methods to override UN*X behaviour in ExtUtils::MakeMaker
#~ ExtUtils::MM_Cygwin - methods to override UN*X behaviour in ExtUtils::MakeMaker
#~ ExtUtils::MM_Darwin - special behaviors for OS X
#~ ExtUtils::MM_DOS - DOS specific subclass of ExtUtils::MM_Unix
#~ ExtUtils::MM_MacOS - once produced Makefiles for MacOS Classic
#~ ExtUtils::MM_NW5 - methods to override UN*X behaviour in ExtUtils::MakeMaker
#~ ExtUtils::MM_OS2 - methods to override UN*X behaviour in ExtUtils::MakeMaker
#~ ExtUtils::MM_QNX - QNX specific subclass of ExtUtils::MM_Unix
#~ ExtUtils::MM_Unix - methods used by ExtUtils::MakeMaker
#~ ExtUtils::MM_UWIN - U/WIN specific subclass of ExtUtils::MM_Unix
#~ ExtUtils::MM_VMS - methods to override UN*X behaviour in ExtUtils::MakeMaker
#~ ExtUtils::MM_VOS - VOS specific subclass of ExtUtils::MM_Unix
#~ ExtUtils::MM_Win32 - methods to override UN*X behaviour in ExtUtils::MakeMaker
#~ ExtUtils::MM_Win95 - method to customize MakeMaker for Win9X
#~ ExtUtils::MY - ExtUtils::MakeMaker subclass for customization
#~ ExtUtils::Packlist - manage .packlist files
#~ ExtUtils::ParseXS - converts Perl XS code into C code
#~ ExtUtils::testlib - add blib/* directories to @INC

#~ ## F
#~ Fatal - Replace functions with equivalents which succeed or die
#~ Fcntl - load the C Fcntl.h defines
#~ File::Basename - Parse file paths into directory, filename and suffix.
#~ File::CheckTree - run many filetest checks on a tree
#~ File::Compare - Compare files or filehandles
#~ File::Copy - Copy files or filehandles
#~ File::DosGlob - DOS like globbing and then some
#~ File::Fetch - A generic file fetching mechanism
#~ File::Find - Traverse a directory tree.
#~ File::Glob - Perl extension for BSD glob routine
#~ File::GlobMapper - Extend File Glob to Allow Input and Output Files
#~ File::Path - Create or remove directory trees
#~ File::Spec - portably perform operations on file names
#~ File::Spec::Cygwin - methods for Cygwin file specs
#~ File::Spec::Epoc - methods for Epoc file specs
#~ File::Spec::Functions - portably perform operations on file names
#~ File::Spec::Mac - File::Spec for Mac OS (Classic)
#~ File::Spec::OS2 - methods for OS/2 file specs
#~ File::Spec::Unix - File::Spec for Unix, base for other File::Spec modules
#~ File::Spec::VMS - methods for VMS file specs
#~ File::Spec::Win32 - methods for Win32 file specs
#~ File::stat - by-name interface to Perl's built-in stat() functions
#~ File::Temp - return name and handle of a temporary file safely
#~ FileCache - keep more files open than the system permits
#~ FileHandle - supply object methods for filehandles
#~ Filter::Simple - Simplified source filtering
#~ Filter::Util::Call - Perl Source Filter Utility Module
#~ FindBin - Locate directory of original perl script

#~ ## G
#~ Getopt::Long - Extended processing of command line options
#~ Getopt::Std - Process single-character switches with switch clustering

#~ ## H
#~ Hash::Util - A selection of general-utility hash subroutines
#~ Hash::Util::FieldHash - Support for Inside-Out Classes

#~ ## I
#~ I18N::Collate - compare 8-bit scalar data according to the current locale
#~ I18N::Langinfo - query locale information
#~ I18N::LangTags - functions for dealing with RFC3066-style language tags
#~ I18N::LangTags::Detect - detect the user's language preferences
#~ I18N::LangTags::List - tags and names for human languages
#~ IO - load various IO modules
#~ IO::Compress::Base - Base Class for IO::Compress modules
#~ IO::Compress::Bzip2 - Write bzip2 files/buffers
#~ IO::Compress::Deflate - Write RFC 1950 files/buffers
#~ IO::Compress::Gzip - Write RFC 1952 files/buffers
#~ IO::Compress::RawDeflate - Write RFC 1951 files/buffers
#~ IO::Compress::Zip - Write zip files/buffers
#~ IO::Dir - supply object methods for directory handles
#~ IO::File - supply object methods for filehandles
#~ IO::Handle - supply object methods for I/O handles
#~ IO::Pipe - supply object methods for pipes
#~ IO::Poll - Object interface to system poll call
#~ IO::Seekable - supply seek based methods for I/O objects
#~ IO::Select - OO interface to the select system call
#~ IO::Socket - Object interface to socket communications
#~ IO::Socket::INET - Object interface for AF_INET domain sockets
#~ IO::Socket::UNIX - Object interface for AF_UNIX domain sockets
#~ IO::Uncompress::AnyInflate - Uncompress zlib-based (zip, gzip) file/buffer
#~ IO::Uncompress::AnyUncompress - Uncompress gzip, zip, bzip2 or lzop file/buffer
#~ IO::Uncompress::Base - Base Class for IO::Uncompress modules
#~ IO::Uncompress::Bunzip2 - Read bzip2 files/buffers
#~ IO::Uncompress::Gunzip - Read RFC 1952 files/buffers
#~ IO::Uncompress::Inflate - Read RFC 1950 files/buffers
#~ IO::Uncompress::RawInflate - Read RFC 1951 files/buffers
#~ IO::Uncompress::Unzip - Read zip files/buffers
#~ IO::Zlib - IO:: style interface to Compress::Zlib
#~ IPC::Cmd - finding and running system commands made easy
#~ IPC::Msg - SysV Msg IPC object class
#~ IPC::Open2 - open a process for both reading and writing using open2()
#~ IPC::Open3 - open a process for reading, writing, and error handling using open3()
#~ IPC::Semaphore - SysV Semaphore IPC object class
#~ IPC::SharedMem - SysV Shared Memory IPC object class
#~ IPC::SysV - System V IPC constants and system calls

#~ ## L
#~ List::Util - A selection of general-utility list subroutines
#~ List::Util::XS - Indicate if List::Util was compiled with a C compiler
#~ Locale::Country - standard codes for country identification
#~ Locale::Currency - standard codes for currency identification
#~ Locale::Language - standard codes for language identification
#~ Locale::Maketext - framework for localization
#~ Locale::Maketext::Guts - Deprecated module to load Locale::Maketext utf8 code
#~ Locale::Maketext::GutsLoader - Deprecated module to load Locale::Maketext utf8 code
#~ Locale::Maketext::Simple - Simple interface to Locale::Maketext::Lexicon
#~ Locale::Script - standard codes for script identification
#~ Log::Message - A generic message storing mechanism;
#~ Log::Message::Config - Configuration options for Log::Message
#~ Log::Message::Handlers - Message handlers for Log::Message
#~ Log::Message::Item - Message objects for Log::Message
#~ Log::Message::Simple - Simplified interface to Log::Message

#~ ## M
#~ Math::BigFloat - Arbitrary size floating point math package
#~ Math::BigInt - Arbitrary size integer/float math package
#~ Math::BigInt::Calc - Pure Perl module to support Math::BigInt
#~ Math::BigInt::CalcEmu - Emulate low-level math with BigInt code
#~ Math::BigInt::FastCalc - Math::BigInt::Calc with some XS for more speed
#~ Math::BigRat - Arbitrary big rational numbers
#~ Math::Complex - complex numbers and associated mathematical functions
#~ Math::Trig - trigonometric functions
#~ Memoize - Make functions faster by trading space for time
#~ Memoize::AnyDBM_File - glue to provide EXISTS for AnyDBM_File for Storable use
#~ Memoize::Expire - Plug-in module for automatic expiration of memoized values
#~ Memoize::ExpireFile - test for Memoize expiration semantics
#~ Memoize::ExpireTest - test for Memoize expiration semantics
#~ Memoize::NDBM_File - glue to provide EXISTS for NDBM_File for Storable use
#~ Memoize::SDBM_File - glue to provide EXISTS for SDBM_File for Storable use
#~ Memoize::Storable - store Memoized data in Storable database
#~ MIME::Base64 - Encoding and decoding of base64 strings
#~ MIME::QuotedPrint - Encoding and decoding of quoted-printable strings
#~ Module::Build - Build and install Perl modules
#~ Module::Build::Base - Default methods for Module::Build
#~ Module::Build::Compat - Compatibility with ExtUtils::MakeMaker
#~ Module::Build::ConfigData - Configuration for Module::Build
#~ Module::Build::Cookbook - Examples of Module::Build Usage
#~ Module::Build::ModuleInfo - DEPRECATED
#~ Module::Build::Notes - Create persistent distribution configuration modules
#~ Module::Build::Platform::aix - Builder class for AIX platform
#~ Module::Build::Platform::Amiga - Builder class for Amiga platforms
#~ Module::Build::Platform::cygwin - Builder class for Cygwin platform
#~ Module::Build::Platform::darwin - Builder class for Mac OS X platform
#~ Module::Build::Platform::Default - Stub class for unknown platforms
#~ Module::Build::Platform::EBCDIC - Builder class for EBCDIC platforms
#~ Module::Build::Platform::MacOS - Builder class for MacOS platforms
#~ Module::Build::Platform::MPEiX - Builder class for MPEiX platforms
#~ Module::Build::Platform::os2 - Builder class for OS/2 platform
#~ Module::Build::Platform::RiscOS - Builder class for RiscOS platforms
#~ Module::Build::Platform::Unix - Builder class for Unix platforms
#~ Module::Build::Platform::VMS - Builder class for VMS platforms
#~ Module::Build::Platform::VOS - Builder class for VOS platforms
#~ Module::Build::Platform::Windows - Builder class for Windows platforms
#~ Module::Build::PPMMaker - Perl Package Manager file creation
#~ Module::Build::Version - DEPRECATED
#~ Module::Build::YAML - DEPRECATED
#~ Module::CoreList - what modules shipped with versions of perl
#~ Module::Load - runtime require of both modules and files
#~ Module::Load::Conditional - Looking up module information / loading at runtime
#~ Module::Loaded - mark modules as loaded or unloaded
#~ Module::Pluggable - automatically give your module the ability to have plugins
#~ Module::Pluggable::Object - automatically give your module the ability to have plugins

#~ ## N
#~ NDBM_File - Tied access to ndbm files
#~ Net::Cmd - Network Command class (as used by FTP, SMTP etc)
#~ Net::Config - Local configuration data for libnet
#~ Net::Domain - Attempt to evaluate the current host's internet name and domain
#~ Net::FTP - FTP Client class
#~ Net::hostent - by-name interface to Perl's built-in gethost*() functions
#~ Net::netent - by-name interface to Perl's built-in getnet*() functions
#~ Net::Netrc - OO interface to users netrc file
#~ Net::NNTP - NNTP Client class
#~ Net::Ping - check a remote host for reachability
#~ Net::POP3 - Post Office Protocol 3 Client class (RFC1939)
#~ Net::protoent - by-name interface to Perl's built-in getproto*() functions
#~ Net::servent - by-name interface to Perl's built-in getserv*() functions
#~ Net::SMTP - Simple Mail Transfer Protocol Client
#~ Net::Time - time and daytime network client interface
#~ NEXT - Provide a pseudo-class NEXT (et al) that allows method redispatch

#~ ## O
#~ O - Generic interface to Perl Compiler backends
#~ Object::Accessor - interface to create per object accessors
#~ Opcode - Disable named opcodes when compiling perl code

#~ ## P
#~ Package::Constants - List all constants declared in a package
#~ Params::Check - A generic input parsing/checking mechanism.
#~ Parse::CPAN::Meta - Parse META.yml and META.json CPAN metadata files
#~ PerlIO - On demand loader for PerlIO layers and root of PerlIO::* name space
#~ PerlIO::encoding - encoding layer
#~ PerlIO::scalar - in-memory IO, scalar IO
#~ PerlIO::via - Helper class for PerlIO layers implemented in perl
#~ PerlIO::via::QuotedPrint - PerlIO layer for quoted-printable strings
#~ Pod::Checker - check pod documents for syntax errors
#~ Pod::Escapes - for resolving Pod E<...> sequences
#~ Pod::Find - find POD documents in directory trees
#~ Pod::Functions - Group Perl's functions a la perlfunc.pod
#~ Pod::Html - module to convert pod files to HTML
#~ Pod::InputObjects - objects representing POD input paragraphs, commands, etc.
#~ Pod::LaTeX - Convert Pod data to formatted Latex
#~ Pod::Man - Convert POD data to formatted *roff input
#~ Pod::ParseLink - Parse an L<> formatting code in POD text
#~ Pod::Parser - base class for creating POD filters and translators
#~ Pod::ParseUtils - helpers for POD parsing and conversion
#~ Pod::Perldoc - Look up Perl documentation in Pod format.
#~ Pod::Perldoc::BaseTo - Base for Pod::Perldoc formatters
#~ Pod::Perldoc::GetOptsOO - Customized option parser for Pod::Perldoc
#~ Pod::Perldoc::ToChecker - let Perldoc check Pod for errors
#~ Pod::Perldoc::ToMan - let Perldoc render Pod as man pages
#~ Pod::Perldoc::ToNroff - let Perldoc convert Pod to nroff
#~ Pod::Perldoc::ToPod - let Perldoc render Pod as ... Pod!
#~ Pod::Perldoc::ToRtf - let Perldoc render Pod as RTF
#~ Pod::Perldoc::ToText - let Perldoc render Pod as plaintext
#~ Pod::Perldoc::ToTk - let Perldoc use Tk::Pod to render Pod
#~ Pod::Perldoc::ToXml - let Perldoc render Pod as XML
#~ Pod::PlainText - Convert POD data to formatted ASCII text
#~ Pod::Select - extract selected sections of POD from input
#~ Pod::Simple - framework for parsing Pod
#~ Pod::Simple::Checker - check the Pod syntax of a document
#~ Pod::Simple::Debug - put Pod::Simple into trace/debug mode
#~ Pod::Simple::DumpAsText - dump Pod-parsing events as text
#~ Pod::Simple::DumpAsXML - turn Pod into XML
#~ Pod::Simple::HTML - convert Pod to HTML
#~ Pod::Simple::HTMLBatch - convert several Pod files to several HTML files
#~ Pod::Simple::LinkSection - represent "section" attributes of L codes
#~ Pod::Simple::Methody - turn Pod::Simple events into method calls
#~ Pod::Simple::PullParser - a pull-parser interface to parsing Pod
#~ Pod::Simple::PullParserEndToken - end-tokens from Pod::Simple::PullParser
#~ Pod::Simple::PullParserStartToken - start-tokens from Pod::Simple::PullParser
#~ Pod::Simple::PullParserTextToken - text-tokens from Pod::Simple::PullParser
#~ Pod::Simple::PullParserToken - tokens from Pod::Simple::PullParser
#~ Pod::Simple::RTF - format Pod as RTF
#~ Pod::Simple::Search - find POD documents in directory trees
#~ Pod::Simple::SimpleTree - parse Pod into a simple parse tree
#~ Pod::Simple::Text - format Pod as plaintext
#~ Pod::Simple::TextContent - get the text content of Pod
#~ Pod::Simple::XHTML - format Pod as validating XHTML
#~ Pod::Simple::XMLOutStream - turn Pod into XML
#~ Pod::Text - Convert POD data to formatted ASCII text
#~ Pod::Text::Color - Convert POD data to formatted color ASCII text
#~ Pod::Text::Overstrike - =for stopwords overstrike
#~ Pod::Text::Termcap - Convert POD data to ASCII text with format escapes
#~ Pod::Usage - print a usage message from embedded pod documentation
#~ POSIX - Perl interface to IEEE Std 1003.1

#~ ## S
#~ Safe - Compile and execute code in restricted compartments
#~ Scalar::Util - A selection of general-utility scalar subroutines
#~ SDBM_File - Tied access to sdbm files
#~ Search::Dict - look - search for key in dictionary file
#~ SelectSaver - save and restore selected file handle
#~ SelfLoader - load functions only on demand
#~ Socket - networking constants and support functions
#~ Storable - persistence for Perl data structures
#~ Symbol - manipulate Perl symbols and their names
#~ Sys::Hostname - Try every conceivable way to get hostname
#~ Sys::Syslog - Perl interface to the UNIX syslog(3) calls

#~ ## T
#~ TAP::Base - Base class that provides common functionality to TAP::Parser and TAP::Harness
#~ TAP::Formatter::Base - Base class for harness output delegates
#~ TAP::Formatter::Color - Run Perl test scripts with color
#~ TAP::Formatter::Console - Harness output delegate for default console output
#~ TAP::Formatter::Console::ParallelSession - Harness output delegate for parallel console output
#~ TAP::Formatter::Console::Session - Harness output delegate for default console output
#~ TAP::Formatter::File - Harness output delegate for file output
#~ TAP::Formatter::File::Session - Harness output delegate for file output
#~ TAP::Formatter::Session - Abstract base class for harness output delegate
#~ TAP::Harness - Run test scripts with statistics
#~ TAP::Object - Base class that provides common functionality to all TAP::* modules
#~ TAP::Parser - Parse TAP|Test::Harness::TAP output
#~ TAP::Parser::Aggregator - Aggregate TAP::Parser results
#~ TAP::Parser::Grammar - A grammar for the Test Anything Protocol.
#~ TAP::Parser::Iterator - Base class for TAP source iterators
#~ TAP::Parser::Iterator::Array - Iterator for array-based TAP sources
#~ TAP::Parser::Iterator::Process - Iterator for process-based TAP sources
#~ TAP::Parser::Iterator::Stream - Iterator for filehandle-based TAP sources
#~ TAP::Parser::IteratorFactory - Figures out which SourceHandler objects to use for a given Source
#~ TAP::Parser::Multiplexer - Multiplex multiple TAP::Parsers
#~ TAP::Parser::Result - Base class for TAP::Parser output objects
#~ TAP::Parser::Result::Bailout - Bailout result token.
#~ TAP::Parser::Result::Comment - Comment result token.
#~ TAP::Parser::Result::Plan - Plan result token.
#~ TAP::Parser::Result::Pragma - TAP pragma token.
#~ TAP::Parser::Result::Test - Test result token.
#~ TAP::Parser::Result::Unknown - Unknown result token.
#~ TAP::Parser::Result::Version - TAP syntax version token.
#~ TAP::Parser::Result::YAML - YAML result token.
#~ TAP::Parser::ResultFactory - Factory for creating TAP::Parser output objects
#~ TAP::Parser::Scheduler - Schedule tests during parallel testing
#~ TAP::Parser::Scheduler::Job - A single testing job.
#~ TAP::Parser::Scheduler::Spinner - A no-op job.
#~ TAP::Parser::Source - a TAP source & meta data about it
#~ TAP::Parser::Utils - Internal TAP::Parser utilities
#~ TAP::Parser::YAMLish::Reader - Read YAMLish data from iterator
#~ TAP::Parser::YAMLish::Writer - Write YAMLish data
#~ Term::ANSIColor - Color screen output using ANSI escape sequences
#~ Term::Cap - Perl termcap interface
#~ Term::Complete - Perl word completion module
#~ Term::ReadLine - Perl interface to various readline packages. If no real package is found, substitutes stubs instead of basic functions.
#~ Term::UI - Term::ReadLine UI made easy
#~ Term::UI::History - history function
#~ Test - provides a simple framework for writing test scripts
#~ Test::Builder - Backend for building test libraries
#~ Test::Builder::Module - Base class for test modules
#~ Test::Builder::Tester - test testsuites that have been built with Test::Builder
#~ Test::Builder::Tester::Color - turn on colour in Test::Builder::Tester
#~ Test::Harness - Run Perl standard test scripts with statistics
#~ Test::More - yet another framework for writing test scripts
#~ Test::Simple - Basic utilities for writing tests.
#~ Text::Abbrev - abbrev - create an abbreviation table from a list
#~ Text::Balanced - Extract delimited text sequences from strings.
#~ Text::ParseWords - parse text into an array of tokens or array of arrays
#~ Text::Soundex - Implementation of the soundex algorithm.
#~ Text::Tabs - expand and unexpand tabs like unix expand(1) and unexpand(1)
#~ Text::Wrap - line wrapping to form simple paragraphs
#~ Thread - Manipulate threads in Perl (for old code only)
#~ Thread::Queue - Thread-safe queues
#~ Thread::Semaphore - Thread-safe semaphores
#~ Tie::Array - base class for tied arrays
#~ Tie::File - Access the lines of a disk file via a Perl array
#~ Tie::Handle - base class definitions for tied handles
#~ Tie::Hash - base class definitions for tied hashes
#~ Tie::Hash::NamedCapture - Named regexp capture buffers
#~ Tie::Memoize - add data to hash when needed
#~ Tie::RefHash - use references as hash keys
#~ Tie::Scalar - base class definitions for tied scalars
#~ Tie::StdHandle - base class definitions for tied handles
#~ Tie::SubstrHash - Fixed-table-size, fixed-key-length hashing
#~ Time::gmtime - by-name interface to Perl's built-in gmtime() function
#~ Time::HiRes - High resolution alarm, sleep, gettimeofday, interval timers
#~ Time::Local - efficiently compute time from local and GMT time
#~ Time::localtime - by-name interface to Perl's built-in localtime() function
#~ Time::Piece - Object Oriented time objects
#~ Time::Seconds - a simple API to convert seconds to other date values
#~ Time::tm - internal object used by Time::gmtime and Time::localtime

#~ ## U
#~ Unicode::Collate - Unicode Collation Algorithm
#~ Unicode::Normalize - Unicode Normalization Forms
#~ Unicode::UCD - Unicode character database
#~ UNIVERSAL - base class for ALL classes (blessed references)
#~ User::grent - by-name interface to Perl's built-in getgr*() functions
#~ User::pwent - by-name interface to Perl's built-in getpw*() functions

#~ ## V
#~ version - Perl extension for Version Objects

#~ ## X
#~ XSLoader - Dynamically load C libraries into Perl code
